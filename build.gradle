buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'

version = "${minecraft_version}-${mod_version}"
group = "${mod_group}"
archivesBaseName = "${mod_name}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    accessTransformer = file('src/main/resources/META-INF/theora_at.cfg')
    runs {
        client = {
            workingDirectory project.file('run').canonicalPath
            mods {
                theora {
                    source sourceSets.main
                }
            }
        }
        server = {
            workingDirectory project.file('run').canonicalPath
            mods {
                theora {
                    source sourceSets.main
                }
            }
        }
    }
}

repositories {
//    maven { url "https://tehnut.info/maven" }
}

dependencies {
    minecraft "${forge_group}:${forge_name}:${minecraft_version}-${forge_version}"
//    compileOnly "mcp.mobius.waila:Hwyla:1.10.0-B52_1.13.2:api"
//    runtime "mcp.mobius.waila:Hwyla:1.10.0-B52_1.13.2"
}

jar {
    manifest {
        attributes(["Specification-Title"     : mod_name,
                    "Specification-Vendor"    : mod_group,
                    "Specification-Version"   : mod_version,
                    "Implementation-Title"    : project.name,
                    "Implementation-Version"  : mod_version,
                    "Implementation-Vendor"   : mod_group,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
}

tasks.withType(Jar) {
    def jarsDir = file("$projectDir/jars")
    if (!jarsDir.exists()) {
        jarsDir.mkdirs()
    }
    destinationDir = jarsDir
}

task major {
    doLast {
        ant.propertyfile(file: "gradle.properties") {
            String version = "${mod_version}"
            def slices = version.split(/\./).toList()
            def major = slices[0].toInteger() + 1
            ant.entry(key: "mod_version", value: major + ".0.0")
        }
    }
    group = "a"
}

task minor {
    doLast {
        ant.propertyfile(file: "gradle.properties") {
            String version = "${mod_version}"
            def slices = version.split(/\./).toList()
            def minor = slices[1].toInteger() + 1
            ant.entry(key: "mod_version", value: slices[0] + "." + minor + ".0")
        }
    }
    group = "a"
}

task revision {
    doLast {
        ant.propertyfile(file: "gradle.properties") {
            String version = "${mod_version}"
            def slices = version.split(/\./).toList()
            def revision = slices[2].toInteger() + 1
            ant.entry(key: "mod_version", value: slices[0] + "." + slices[1] + "." + revision)
        }
    }
    group = "a"
}