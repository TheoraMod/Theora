buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url = 'https://files.minecraftforge.net/maven'
        }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'idea'

version = "${minecraft_version}-${mod_version}.${build_num}"
group = "${mod_group}"
archivesBaseName = "${mod_name}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: mappings_channel, version: mappings_version
    //accessTransformer = file('src/main/resources/META-INF/theora_at.cfg')
    runs {
        client = {
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
    }
}

dependencies {
    minecraft "${forge_group}:${forge_name}:${minecraft_version}-${forge_version}"
}

task major {
    doLast {
        ant.propertyfile(file: "gradle.properties") {
            String version = "${mod_version}"
            String bld_num = "${build_num}".toInteger() + 1
            def slice = version.split(/\./).toList()
            def major = slice[0].toInteger() + 1
            ant.entry(key: "mod_version", value: major + ".0.0")
            ant.entry(key: "build_num", value: bld_num)
        }
    }
    group = "incr"
}

task minor {
    doLast {
        ant.propertyfile(file: "gradle.properties") {
            String version = "${mod_version}"
            String bld_num = "${build_num}".toInteger() + 1
            def slice = version.split(/\./).toList()
            def minor = slice[1].toInteger() + 1
            ant.entry(key: "mod_version", value: slice[0] + "." + minor + ".0")
            ant.entry(key: "build_num", value: bld_num)
        }
    }
    group = "incr"
}

task revision {
    doLast {
        ant.propertyfile(file: "gradle.properties") {
            String version = "${mod_version}"
            String bld_num = "${build_num}".toInteger() + 1
            def slice = version.split(/\./).toList()
            def revision = slice[2].toInteger() + 1
            ant.entry(key: "mod_version", value: slice[0] + "." + slice[1] + "." + revision)
            ant.entry(key: "build_num", value: bld_num)
        }
    }
    group = "incr"
}

tasks.withType(Jar) {
    def jarsDir = file("$projectDir/../jars/${mod_name}")
    if (!jarsDir.exists()) {
        jarsDir.mkdirs()
    }
    destinationDir = jarsDir
}

processResources {
    inputs.property 'version', project.version
    inputs.property 'mcversion', minecraft_version
    from(sourceSets.main.resources.srcDirs) {
        include 'META_INF/mods.toml'
        expand 'version': project.version, 'mcversion': minecraft_version
    }
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META_INF/mods.toml'
    }
}